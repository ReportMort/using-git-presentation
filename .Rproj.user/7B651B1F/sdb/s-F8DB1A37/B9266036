{
    "contents" : "Common Scenarios with Git\n========================================\nauthor: Steve Mortimer\ndate: August 11, 2015\ncss: css-presentations.css\n\n```{r setup, include=FALSE}\n  library(knitr)\n  knitr::opts_chunk$set(echo=TRUE, eval=TRUE)\n```\n\ngit-like stuff\n====================================================\ntitle: false\ntype: subsection\n<h3>\n  Using <span style=\"font-family: monospace\">git</span> in the real world\n</h3>\n\n* <span style=\"font-family: monospace\">git</span> has commands to manage changes to folders and files, it doesn't \nnecessarily host those folders and files (i.e. you could just run locally)\n* <span style=\"color:red\">Github</span> hosts public repositories and offers an interface to them + some extra features\n* <span style=\"color:red\">Bitbucket</span> hosts on cloud private repositories + some extra features\n* <span style=\"color:red\">Stash</span> hosts on cloud or on-premise private repositories + some extra features\n* GUIs visualize repositories and associated actions (e.g. Tower, Gitbox, GitX, Sourcetree, etc., plus \nother language-specific editors have plugins)\n\nAwareness of SSH Keys\n====================================================\ntype: subsection\n\n**Scenario:** My repository is hosted elsewhere, so I first need to authenticate\nbefore adding, modifying, and deleting content. Otherwise anyone could modify\nmy stuff or snoop on my stuff during transfer.\n\n* There are multiple protocols for transferring git content <a href=\"https://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols\" target=\"_blank\">(see here)</a>, but most common is SSH which securely encrypts and compacts data while sending.\n* You might not really need a key <a href=\"https://help.github.com/articles/do-i-need-ssh-keys-to-use-github-for-windows/\" target=\"_blank\">(see here)</a>, \nbut you should be familiar and setting up your own key is probably a good idea.\n* How to setup SSH keys by Github <a href=\"https://help.github.com/articles/generating-ssh-keys/\" target=\"_blank\">(see here)</a>. **The takeaway:** \nGenerate private/public key pair in .ssh directory inside your home directory. Copy paste the contents of the public key to Github.\n\nStart with Simple HTML Page in a Folder\n====================================================\ntype: subsection\n\n</br>\n1. On your compter create a folder called 'test'  \n2. Add a blank text file in that folder  \n3. Rename the file \"Hello World.html\"  \n4. Copy paste the example text from: <a href=\"http://www.mkyong.com/html/html-tutorial-hello-world/\" target=\"_blank\">http://www.mkyong.com/html/html-tutorial-hello-world</a>\n\n\nThis is just to simulate a project you've started with some work.\n\ngit init et. al.\n====================================================\ntitle: false\nclass: ignore-links\ntype: subsection\n<h3>\n  <span style=\"font-family: monospace\">git init</span> et. al.\n</h3>\n\n**Scenario:** I have a folder on my computer locally and want to\npush it to a Github repository\n\n1. Create the repository on Github by <span style=\"color:red\">Clicking New</span>\n2. Run  <span style=\"font-family: monospace; font-size: 75%;\">git init</span> \n3. Run  <span style=\"font-family: monospace; font-size: 75%;\">git add .</span> \n4. Run  <span style=\"font-family: monospace; font-size: 75%;\">git commit -m \"first commit\"</span> \n5. Run  <span style=\"font-family: monospace; font-size: 70%;\">git remote add origin git@github.com:{YourAcctName}/test.git</span> \n6. Run  <span style=\"font-family: monospace; font-size: 75%;\">git push -u origin master</span>\n\nCreate a simple html text file\n\ngit init et. al. breakdown\n====================================================\ntitle: false\ntype: subsection\n<h3>\n  <span style=\"font-family: monospace\">git init</span> et. al. Breakdown\n</h3>\n\n**Mini-Scenarios:**\n\n* <span style=\"font-family: monospace; font-size: 75%;\">git init</span> = I want to start using git here\n* <span style=\"font-family: monospace; font-size: 75%;\">git add</span> = I want to add these files to this commit\n* <span style=\"font-family: monospace; font-size: 75%;\">git commit</span> = I want to track these changes\n* <span style=\"font-family: monospace; font-size: 75%;\">git push</span> = I want to take the changes and enforce them elsewhere\n\n\nbreak-1\n====================================================\ntitle: false\n<h3>\n  <div class=\"midcenter\" style=\"margin-left:-400px; margin-top:-300px;\">\n  Break</br></br></br><span style=\"font-weight: 700; color:#25679E;\">I can:</span> Create a repository with files and push changes to a remote repository\n  </div>\n</h3>\n\n\ngit clone\n====================================================\ntitle: false\nclass: ignore-links\ntype: subsection\n<h3>\n  <span style=\"font-family: monospace\">git clone</span>\n</h3>\n\n**Scenario:** I want to take an existing repository of mine on Github and \nbring it down to my computer locally\n\n1. Create and/or Go to folder where you want repositories to be locally:  \n a. Run  <span style=\"font-family: monospace; font-size: 75%;\">mkdir ~/cloned-repos</span>  \n b. Run  <span style=\"font-family: monospace; font-size: 75%;\">cd ~/cloned-repos</span>  \n2. Copy to clipboard the SSH clone URL to use with <span style=\"font-family: monospace\">git clone</span>  \n3. Run  <span style=\"font-family: monospace; font-size: 70%;\">git clone git@github.com:{YourAcctName}/test.git</span>\n\n\ngit remote add\n====================================================\ntitle: false\nclass: ignore-links\ntype: subsection\n<h3>\n  <span style=\"font-family: monospace\">git remote</span>\n</h3>\n\n**Scenario:** I have cloned a repository and made some changes locally and\nI want to push those changes to the remote repository\n\n1. Check existing remote sources:  \n a. Run  <span style=\"font-family: monospace; font-size: 75%;\">git remote -v</span>  \n2. Add your target remote path to the remote sources:  \n a. Run  <span style=\"font-family: monospace; font-size: 70%;\">git remote add origin git@github.com:{YourAcctName}/test.git</span>  \n3. Verify it's been added:  \n a. Run  <span style=\"font-family: monospace; font-size: 75%;\">git remote -v</span>  \n\n**The Takeaway:**You've given a nickname to where to push changes not just locally, but elsewhere. You've named it origin.\n\n\ngit push -u\n====================================================\ntitle: false\nclass: ignore-links\ntype: subsection\n<h3>\n  <span style=\"font-family: monospace\">git push (-u)</span>\n</h3>\n\n**Scenario (cont.):** I have cloned a repository and made some changes locally and\nI want to push those changes to the remote repository\n\n1. Go through the normal routine to commit changes:  \n a. Run  <span style=\"font-family: monospace; font-size: 75%;\">git add .</span> and  \n b. Run  <span style=\"font-family: monospace; font-size: 75%;\">git commit</span>  \n2. Push \"upstream\", that's what the option <span style=\"font-family: monospace; font-size: 75%;\">-u</span> stands for  \n a. Run  <span style=\"font-family: monospace; font-size: 75%;\">git push -u origin master</span>  \n \n**The Takeaway:**You've designated your master branch to be pushed upstream to the remote nicknamed origin\n\n\ngit reset\n====================================================\ntitle: false\ntype: subsection\n<h3>\n  <span style=\"font-family: monospace\">git reset</span>\n</h3>\n\n**Scenario:** I have committed some changes to my repository, but it was a mistake and I want to go back.\n\nThe most common options are \"soft\" and \"hard\" resets. The former keeps your changes, but rolls back the commit status to say that you've got changes to commit. The latter completely erases your changes and the commits.\n\n1. Find the commit hash on Github\n2. Run  <span style=\"font-family: monospace; font-size: 75%;\">git reset `--`hard \\<hashcode_here\\></span>\n3. The soft reset is <span style=\"font-family: monospace; font-size: 75%;\">git reset `--`soft \\<hashcode_here\\></span>\n4. Note: <span style=\"font-family: monospace; font-size: 75%;\">git push</span> may require \n<span style=\"font-family: monospace; font-size: 75%;\">`--`force</span>\n\n\ngit fetch and git pull\n====================================================\ntitle: false\ntype: subsection\n<h3>\n  <span style=\"font-family: monospace\">git fetch/pull</span>\n</h3>\n\n**Scenario:** I want to bring down changes from the remote repository into my local copy.\n\nIt depends on whether you have local changes. Remember you might have local edits not pushed.<div align=\"center\">\n<span style=\"font-family: monospace; font-size: 75%;\">git pull</span> does a <span style=\"font-family: monospace; font-size: 75%;\">git fetch</span> followed by a <span style=\"font-family: monospace; font-size: 75%;\">git merge</span>\n</div>  \nSo if you want to see the differences before merging then:\n\n1. Run <span style=\"font-family: monospace; font-size: 75%;\">git fetch</span> (sync with remotes) \n2. Run <span style=\"font-family: monospace; font-size: 75%;\">git diff origin/master</span>\n-otherwise-  \n1. Run <span style=\"font-family: monospace; font-size: 75%;\">git pull</span> (merge conflicts may arise, you should resolve them)\n                                     \n\nbreak-2\n====================================================\ntitle: false\n<h3>\n  <div class=\"midcenter\" style=\"margin-left:-400px; margin-top:-300px;\">\n  Break</br></br></br><span style=\"font-weight: 700; color:#25679E;\">I can:</span> Work around changes in a remote repository\n  </div>\n</h3>\n\n\nworking-with-others-repos\n====================================================\ntitle: false\nclass: ignore-links\ntype: subsection\n<h3>\n  Forking Another Repository\n</h3>\n\n**Scenario:** I want to pull down someone else's code and maybe later propose changes.\n \n\"Forking\" brings a copy into a repository that you own, so you control the code base. Different than \"cloning\" since you don't own.\n\n1. On Github navigate to repository you'd like to fork.\n2. <span style=\"color:red\">Click Fork</span> and the repository now exists as part of your account\n3. Clone just like any other repo in your account  \n<span style=\"font-family: monospace; font-size: 70%;\">git clone git@github.com:{YourAcctName}/html-page.git</span>\n4. Make a change and push  \n<span style=\"font-family: monospace; font-size: 60%;\">git push -u origin master</span>\n\n\nworking-with-others-repos\n====================================================\ntitle: false\nclass: ignore-links\ntype: subsection\n<h3>\n  Staying updated with <span style=\"font-family: monospace\">git rebase</span>\n</h3>\n\n**Scenario:** I forked a repository, but the original owner made some changes I want in my local copy.\n\n1. Add Remote that Tracks Original  \n  <span style=\"font-family: monospace; font-size: 65%;\">git remote add original git@github.com:757RUG/html-page.git</span>\n2. Fetch everything (not pull) to get the original owner's changes  \n  <span style=\"font-family: monospace; font-size: 65%;\">git fetch original</span>  \n3. Rebase will replay any commits you missed onto your branch  \n  <span style=\"font-family: monospace; font-size: 65%;\">git rebase original/master</span>\n4. Push changes so they exist on your remote  \n  <span style=\"font-family: monospace; font-size: 65%;\">git push -f origin master</span>\n\nproposing-a-change\n====================================================\ntitle: false\nclass: ignore-links\ntype: subsection\n<h3>\n  Making a Pull Request\n</h3>\n\n**Scenario:** I forked a repository and want to propose changes to the owner for inclusion in the code base.\n\n1. On Github <span style=\"color:red\">Click Pull Request</span> and <span style=\"color:red\">Add a comment</span>. \nYou can reference open issues or links that provide context.\n\n2. On Github, on the owner's side, they will be able to review the code diffs and decide on merging. Merge conflicts are resolved by them since they own the recipient codebase in this scenario.\n\n\nbreak-3\n====================================================\ntitle: false\n<h3>\n  <div class=\"midcenter\" style=\"margin-left:-400px; margin-top:-300px;\">\n  Break</br></br></br><span style=\"font-weight: 700; color:#25679E;\">I can:</span> Fork a repository and propose changes.\n  </div>\n</h3>\n\n\ngit checkout\n====================================================\ntitle: false\ntype: subsection\n<h3>\n  Working With Branches and <span style=\"font-family: monospace\">git checkout</span>\n</h3>\n\n**Scenario:** I have or a teammate has created a self-contained unit work apart from the \"trunk\" or master codebase that I want to work on.\n\n0. In Github <span style=\"color:red\">Create Branch</span> (simply type the name of a new branch to create, e.g. gh-pages).\n1. Run <span style=\"font-family: monospace; font-size: 65%;\">git fetch</span>\n2. If you're not sure what branches, you can check:  \n<span style=\"font-family: monospace; font-size: 65%;\">git branch -v -a</span>\n3. Checkout the branch you want to work with  \n  <span style=\"font-family: monospace;  font-size: 65%;\">git checkout master</span>\n4. Confirm with <span style=\"font-family: monospace;  font-size: 65%;\">git status</span>\n\nItems Still Not Covered\n====================================================\ntype: subsection\n\n* Branching and the  <span style=\"font-family: monospace;  font-size: 85%;\">git flow</span> model <a href=\"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow\" target=\"_blank\">(see here)</a>. Helps separate master code, enhancements, bugs, testing into difference branches.\n* Tagging  <span style=\"font-family: monospace;  font-size: 85%;\">git tag</span>  to create a single point to reference code in deployments\n* Merging, Conflicts, Code Diffs, Code Reviews with Git to facilitate code cleanliness, early bug catches, shortened development time.\n\n",
    "created" : 1435001450362.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3013967055",
    "id" : "B9266036",
    "lastKnownWriteTime" : 1450200872,
    "path" : "~/github-personal/using-git-presentation/index.Rpres",
    "project_path" : "index.Rpres",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_presentation"
}